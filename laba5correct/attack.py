import sys
import itertools
import string
import time
from PySide6.QtWidgets import QApplication
from laba3 import LoginWindow
from unittest.mock import patch

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–π–∫–æ—Å—Ç–∏
def calculate_combinations(password_length: int, alphabet_power: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–æ–ª—è"""
    return alphabet_power ** password_length


def calculate_crack_time(password_length: int, alphabet_power: int, speed: float, max_attempts: int,
                         delay: int) -> tuple:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    total_combinations = calculate_combinations(password_length, alphabet_power)
    time_without_delay = total_combinations / speed

    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ max_attempts
    if total_combinations <= max_attempts:
        time_with_delay = 0
    else:
        if total_combinations % max_attempts == 0:
            time_with_delay = (total_combinations // max_attempts - 1) * delay
        else:
            time_with_delay = (total_combinations // max_attempts) * delay

    return time_without_delay + time_with_delay, total_combinations


def format_time(seconds: int) -> str:
    years, seconds = divmod(seconds, 365 * 24 * 3600)
    months, seconds = divmod(seconds, 30 * 24 * 3600)
    days, seconds = divmod(seconds, 24 * 3600)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    return f"{years} –ª–µ—Ç {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"


def get_alphabet_power(password: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ"""
    char_sets = {
        'russian_lower': "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        'russian_upper': "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø",
        'digits': string.digits,
        'special': string.punctuation
    }

    power = 0
    for charset_name, charset in char_sets.items():
        if any(char in charset for char in password):
            power += len(charset)

    return power


def print_strength_results(password: str, speed: float, max_attempts: int, delay: int):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
    password_length = len(password)
    alphabet_size = get_alphabet_power(password)

    total_time, total_combinations = calculate_crack_time(
        password_length, alphabet_size, speed, max_attempts, delay
    )

    print("\n[üîê] –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è:")
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print(f"–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {password_length}")
    print(f"–ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞: {alphabet_size}")
    print(f"–ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_combinations:,}".replace(",", " "))
    print(f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞: {format_time(int(total_time))}")


# Qt Init
app = QApplication(sys.argv)

# –¶–µ–ª—å
target_user = "DASHA"
login_win = LoginWindow()

# –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
russian_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
russian_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
default_charset = russian_lower + russian_upper + string.digits

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞
def generate_passwords(charset, max_length):
    for length in range(1, max_length + 1):
        for password in itertools.product(charset, repeat=length):
            yield ''.join(password)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
def load_dictionary(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print(f"[!] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (dictionary/full): ").strip().lower()
if mode == "dictionary":
    passwords = load_dictionary("russian_words.txt")
elif mode == "full":
    max_length = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: "))
    passwords = generate_passwords(default_charset, max_length)
else:
    print("[!] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
    sys.exit(1)

# üîê –ê—Ç–∞–∫–∞
found_password = None
print("[INFO] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä...")

start_time = time.time()
max_attempts = 10  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
delay = 0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

with patch("laba3.QMessageBox.information") as mock_info, \
     patch("laba3.QMessageBox.warning") as mock_warn:

    for idx, password in enumerate(passwords, 1):
        login_win.username_input.setText(target_user)
        login_win.password_input.setText(password)
        login_win.login()

        # –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–±–æ—Ä–∞
        elapsed = time.time() - start_time
        speed = idx / elapsed if elapsed > 0 else 0

        # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        alphabet_size = len(set(password))  # –ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        password_length = len(password)
        crack_time, total_combinations = calculate_crack_time(password_length, alphabet_size, speed, max_attempts, delay)
        strength_speed = total_combinations / elapsed if elapsed > 0 else float('inf')
        formatted_time = format_time(int(crack_time))

        if mock_info.called:
            args = mock_info.call_args[0]
            if "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in args[2]:
                found_password = password
                print(f"\n[‚úÖ] –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: {password}")
                break

        mock_info.reset_mock()
        mock_warn.reset_mock()

# üßæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
elapsed = time.time() - start_time
speed = idx / elapsed if elapsed > 0 else 0
strength_speed = total_combinations / elapsed if elapsed > 0 else float('inf')
if not found_password:
    print("\n[-] –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
print(f"\n[üìä] –ü–æ–ø—ã—Ç–æ–∫: {idx} | –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫ | –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {strength_speed:.2f} –ø–∞—Ä–æ–ª–µ–π/—Å–µ–∫")

# üîê –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
if found_password:
    print_strength_results(found_password, speed, max_attempts=10, delay=0)

# –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.exit(app.exec())
import sys
import json
import hashlib
import re
import time
import string
import requests
from itertools import product
from multiprocessing import Pool, cpu_count
from PySide6.QtCore import QTimer
from PySide6.QtWidgets import (QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton,
                               QMessageBox, QDialog, QListWidget, QHBoxLayout, QInputDialog,
                               QComboBox, QSpinBox, QTextEdit, QTabWidget)
from PySide6.QtCore import QThread, Signal, QObject

# --- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
USERS_FILE = "users.json"
SIMPLE_PASSWORDS = {"123456", "password", "qwerty", "abc123", "111111"}

# –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ –ª–∞—Ç–∏–Ω—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
RUS_TO_LAT = {
    '–π': 'q', '—Ü': 'w', '—É': 'e', '–∫': 'r', '–µ': 't', '–Ω': 'y', '–≥': 'u', '—à': 'i', '—â': 'o', '–∑': 'p',
    '—Ñ': 'a', '—ã': 's', '–≤': 'd', '–∞': 'f', '–ø': 'g', '—Ä': 'h', '–æ': 'j', '–ª': 'k', '–¥': 'l', '–∂': ';',
    '—è': 'z', '—á': 'x', '—Å': 'c', '–º': 'v', '–∏': 'b', '—Ç': 'n', '—å': 'm', '–±': ',', '—é': '.', '—ë': '`',
    '—ç': '[', '—ä': ']', ' ': ' '
}


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def load_users():
    try:
        with open(USERS_FILE, "r", encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        users = {"ADMIN": {"password": hash_password("admin"), "blocked": False, "restrictions": {}}}
        save_users(users)
        return users


def save_users(users):
    with open(USERS_FILE, "w", encoding='utf-8') as file:
        json.dump(users, file, ensure_ascii=False, indent=4)


def download_russian_words(url="https://raw.githubusercontent.com/danakt/russian-words/master/russian.txt"):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞)."""
    try:
        response = requests.get(url)
        words = response.text.splitlines()
        with open("russian_words.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(words))
        return words
    except Exception:
        return ["–ø–∞—Ä–æ–ª—å", "–ø—Ä–∏–≤–µ—Ç", "–∞–¥–º–∏–Ω", "qwerty"]  # Fallback-—Å–ª–æ–≤–∞—Ä—å


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
def calculate_combinations(password_length: int, alphabet_power: int) -> int:
    return alphabet_power ** password_length


def calculate_crack_time(password_length: int, alphabet_power: int, speed: float = 10,
                         max_attempts: int = 13, delay: int = 10) -> tuple:
    total_combinations = calculate_combinations(password_length, alphabet_power)
    time_without_delay = total_combinations / speed
    time_with_delay = (total_combinations // max_attempts) * delay
    return time_without_delay + time_with_delay, total_combinations


def format_time(seconds: int) -> str:
    years, seconds = divmod(seconds, 365 * 24 * 3600)
    months, seconds = divmod(seconds, 30 * 24 * 3600)
    days, seconds = divmod(seconds, 24 * 3600)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    return f"{years} –ª–µ—Ç {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"


def get_alphabet_power(password: str) -> int:
    has_digit = any(c.isdigit() for c in password)
    has_lower = any(c.islower() for c in password) and any(c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in password.lower())
    has_upper = any(c.isupper() for c in password) and any(c in '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø' for c in password.upper())
    has_special = any(not c.isalnum() for c in password)

    if has_special:
        return 95  # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    elif has_digit and (has_lower or has_upper):
        return 33 + 10  # 33 —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã
    elif has_lower or has_upper:
        return 33  # –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
    else:
        return 10  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã


# --- –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
class PasswordCracker(QObject):
    finished = Signal()
    progress = Signal(str)
    password_found = Signal(str, str, float)  # —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –ø–∞—Ä–æ–ª—å, –≤—Ä–µ–º—è
    dictionary_loaded = Signal(int)
    speed_updated = Signal(int)  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏

    def __init__(self, target_hash, max_length=6):
        super().__init__()
        self.target_hash = target_hash
        self.max_length = max_length
        self._is_running = True
        self.password_dictionary = {}
        self.workers = []  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏ —Å worker –∏ thread
        self.threads = []  # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.total_attempts = 0
        self.last_update_time = time.time()
        self.last_attempts = 0

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.speed_timer = QTimer()
        self.speed_timer.timeout.connect(self.update_speed)
        self.speed_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    def update_speed(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å"""
        current_time = time.time()
        elapsed = current_time - self.last_update_time
        if elapsed > 0:
            speed = int((self.total_attempts - self.last_attempts) / elapsed)
            self.speed_updated.emit(speed)
            self.last_update_time = current_time
            self.last_attempts = self.total_attempts


    def load_dictionary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π."""
        try:
            with open("russian_words.txt", "r", encoding="utf-8") as f:
                russian_words = [line.strip() for line in f if 3 <= len(line.strip()) <= 12]
        except FileNotFoundError:
            russian_words = download_russian_words()

        self.password_dictionary = {word: ''.join([RUS_TO_LAT.get(char.lower(), char)
                                                   for char in word])
                                    for word in russian_words}
        self.dictionary_loaded.emit(len(self.password_dictionary))

    def run(self):
        self.load_dictionary()
        start_time = time.time()

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        self.progress.emit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π...")
        for pwd in ["123456", "password", "admin", "qwerty", "12345", "123456789"]:
            if not self._is_running:
                self.cleanup_workers()
                return
            if hash_password(pwd) == self.target_hash:
                self.password_found.emit("", pwd, time.time() - start_time)
                self.cleanup_workers()
                return

        # 2. –°–ª–æ–≤–∞—Ä–Ω–∞—è –∞—Ç–∞–∫–∞
        self.progress.emit("üìö –°–ª–æ–≤–∞—Ä–Ω–∞—è –∞—Ç–∞–∫–∞...")
        for word in self.password_dictionary.values():
            if not self._is_running:
                self.cleanup_workers()
                return
            if hash_password(word) == self.target_hash:
                self.password_found.emit("", word, time.time() - start_time)
                self.cleanup_workers()
                return

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –∫–∞–∫ –µ—Å—Ç—å
        self.progress.emit("üî† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤...")
        for russian_word in self.password_dictionary:
            if not self._is_running:
                self.cleanup_workers()
                return
            if hash_password(russian_word) == self.target_hash:
                self.password_found.emit(russian_word, russian_word, time.time() - start_time)
                self.cleanup_workers()
                return

        # 4. Brute-force –∞—Ç–∞–∫–∞
        self.progress.emit("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º brute-force...")
        alphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' + \
                   '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø' + \
                   string.digits + '!@#$%'

        # –°–æ–∑–¥–∞–µ–º worker'–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã
        for length in range(1, self.max_length + 1):
            if not self._is_running:
                self.cleanup_workers()
                return

            self.progress.emit(f"üî¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª–∏–Ω—ã {length}...")

            worker = BruteForceWorker(self.target_hash, alphabet, length)
            thread = QThread()
            worker.moveToThread(thread)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            thread.started.connect(worker.run)
            worker.finished.connect(thread.quit)
            worker.finished.connect(worker.deleteLater)
            thread.finished.connect(thread.deleteLater)

            worker.attempt_made.connect(self.count_attempt)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            worker.password_found.connect(lambda pwd, st=start_time: (
                self.password_found.emit("", pwd, time.time() - st),
                self.stop()
            ))

            thread.start()
            self.workers.append(worker)
            self.threads.append(thread)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.wait()

        if self._is_running:  # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.progress.emit("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.finished.emit()

    def count_attempt(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫"""
        self.total_attempts += 1

    def cleanup_workers(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏"""
        self._is_running = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
        self.speed_timer.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for thread in self.threads:
            try:
                thread.quit()
                thread.wait(500)
            except Exception as e:
                print(f"Error stopping thread: {e}")

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
        self.workers = []
        self.threads = []

    def stop(self):
        self._is_running = False
        self.cleanup_workers()
        self.progress.emit("üõë –ü–æ–¥–±–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class BruteForceWorker(QObject):
    finished = Signal()
    password_found = Signal(str)
    attempt_made = Signal()  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ

    def __init__(self, target_hash, alphabet, length):
        super().__init__()
        self.target_hash = target_hash
        self.alphabet = alphabet
        self.length = length
        self._is_running = True

    def run(self):
        try:
            for attempt in product(self.alphabet, repeat=self.length):
                if not self._is_running:
                    break

                self.attempt_made.emit()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø–æ–ø—ã—Ç–∫–µ

                if hash_password(''.join(attempt)) == self.target_hash:
                    if self._is_running:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞
                        self.password_found.emit(''.join(attempt))
                    break
        except Exception as e:
            print(f"Worker error: {e}")
        finally:
            self.finished.emit()

    def stop(self):
        self._is_running = False


# --- –ö–ª–∞—Å—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
class AdminWindow(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.setWindowTitle("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        self.setGeometry(200, 200, 400, 500)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è ADMIN
        self.change_admin_password_button = QPushButton("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å ADMIN")
        self.change_admin_password_button.clicked.connect(self.change_admin_password)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        self.back_button = QPushButton("–ù–∞–∑–∞–¥")
        self.back_button.clicked.connect(self.close)

        layout.addWidget(self.change_admin_password_button)
        layout.addWidget(self.back_button)
        self.setLayout(layout)

    def change_admin_password(self):
        users = load_users()

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        current_password, ok = QInputDialog.getText(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å ADMIN:", QLineEdit.Password
        )
        if not ok:
            return

        if hash_password(current_password) != users["ADMIN"]["password"]:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!")
            return

        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        new_password, ok = QInputDialog.getText(
            self, "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞):", QLineEdit.Password
        )
        if not ok or not new_password:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(new_password) < 4:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞!")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        confirm_password, ok = QInputDialog.getText(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", QLineEdit.Password
        )
        if new_password != confirm_password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        users["ADMIN"]["password"] = hash_password(new_password)
        save_users(users)
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å ADMIN —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")


# --- –ö–ª–∞—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–æ–ª–µ–π ---
class PasswordAnalysisWindow(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.setWindowTitle("–ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è")
        self.setGeometry(200, 200, 600, 500)
        self.cracker_thread = None
        self.cracker = None
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.tab1 = QWidget()
        self.setup_tab1()
        self.tabs.addTab(self.tab1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è
        self.tab2 = QWidget()
        self.setup_tab2()
        self.tabs.addTab(self.tab2, "–ü–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª—è")

        layout.addWidget(self.tabs)
        self.setLayout(layout)

    def setup_tab1(self):
        layout = QVBoxLayout()

        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        self.check_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
        self.check_button.clicked.connect(self.check_password_strength)

        self.result_display = QTextEdit()
        self.result_display.setReadOnly(True)

        layout.addWidget(QLabel("–ü–∞—Ä–æ–ª—å:"))
        layout.addWidget(self.password_input)
        layout.addWidget(self.check_button)
        layout.addWidget(self.result_display)
        self.tab1.setLayout(layout)

    def check_password_strength(self):
        password = self.password_input.text()
        if not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return

        alphabet_power = get_alphabet_power(password)
        crack_time, combinations = calculate_crack_time(len(password), alphabet_power)

        result = [
            f"–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è: {password}",
            f"–î–ª–∏–Ω–∞: {len(password)} —Å–∏–º–≤–æ–ª–æ–≤",
            f"–ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞: {alphabet_power}",
            f"–í–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {combinations:,}",
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–±–æ—Ä–∞: {format_time(int(crack_time))}"
        ]

        if password.lower() in SIMPLE_PASSWORDS:
            result.append("\n‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π!")
        elif len(password) < 8:
            result.append("\n‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –æ—Ç 8 —Å–∏–º–≤–æ–ª–æ–≤!")

        self.result_display.setText("\n".join(result))

    def setup_tab2(self):
        layout = QVBoxLayout()

        self.target_login = QLineEdit()
        self.target_login.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–±–æ—Ä–∞
        settings_layout = QHBoxLayout()

        self.max_length_spin = QSpinBox()
        self.max_length_spin.setRange(1, 8)
        self.max_length_spin.setValue(4)
        self.max_length_spin.setPrefix("–ú–∞–∫—Å. –¥–ª–∏–Ω–∞: ")

        self.dictionary_info = QLabel("–°–ª–æ–≤–∞—Ä—å: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        settings_layout.addWidget(self.max_length_spin)
        settings_layout.addWidget(self.dictionary_info)

        self.speed_label = QLabel("–°–∫–æ—Ä–æ—Å—Ç—å: 0 –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        layout.addWidget(self.speed_label)

        # –ö–Ω–æ–ø–∫–∏
        self.start_attack_button = QPushButton("–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä")
        self.start_attack_button.clicked.connect(self.start_attack)

        self.stop_attack_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_attack_button.clicked.connect(self.stop_attack)
        self.stop_attack_button.setEnabled(False)

        self.attack_progress = QTextEdit()
        self.attack_progress.setReadOnly(True)

        layout.addWidget(QLabel("–õ–æ–≥–∏–Ω –¥–ª—è –ø–æ–¥–±–æ—Ä–∞:"))
        layout.addWidget(self.target_login)
        layout.addLayout(settings_layout)
        layout.addWidget(self.start_attack_button)
        layout.addWidget(self.stop_attack_button)
        layout.addWidget(self.attack_progress)
        self.tab2.setLayout(layout)

    def start_attack(self):
        login = self.target_login.text()
        users = load_users()

        if login not in users:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        self.start_attack_button.setEnabled(False)
        self.stop_attack_button.setEnabled(True)
        self.attack_progress.clear()

        target_hash = users[login]["password"]
        max_len = self.max_length_spin.value()

        self.attack_progress.append(f"–ù–∞—á–∞–ª–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {login}...")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self.cracker_thread = QThread()
        self.cracker = PasswordCracker(target_hash, max_length=max_len)
        self.cracker.moveToThread(self.cracker_thread)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.cracker.speed_updated.connect(self.update_speed_display)
        self.cracker_thread.started.connect(self.cracker.run)
        self.cracker.finished.connect(self.cracker_thread.quit)
        self.cracker.finished.connect(self.on_attack_finished)
        self.cracker.progress.connect(self.update_progress)
        self.cracker.password_found.connect(self.on_password_found)
        self.cracker.dictionary_loaded.connect(self.update_dictionary_info)

        self.cracker_thread.start()

    def update_speed_display(self, speed):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.speed_label.setText(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:,} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        QApplication.processEvents()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    def stop_attack(self):
        if self.cracker:
            self.cracker.stop()
        self.attack_progress.append("–ü–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.on_attack_finished()

    def update_dictionary_info(self, count):
        self.dictionary_info.setText(f"–°–ª–æ–≤–∞—Ä—å: {count} —Å–ª–æ–≤")

    def on_password_found(self, russian_word, password, time_taken):
        try:
            if not self.cracker:
                return

            msg = f"‚úÖ –ü–∞—Ä–æ–ª—å {'–Ω–∞–π–¥–µ–Ω' if russian_word else '–≤–∑–ª–æ–º–∞–Ω'}!\n"
            if russian_word:
                msg += f"–°–ª–æ–≤–æ: '{russian_word}'\n"
            msg += f"–ü–∞—Ä–æ–ª—å: '{password}'\n"
            msg += f"–í—Ä–µ–º—è: {time_taken:.2f} —Å–µ–∫\n"
            self.attack_progress.append(msg)
            self.attack_progress.append("=" * 40)
        except Exception as e:
            print(f"Error displaying password: {e}")

    def update_progress(self, message):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–µ
        if "üîç" in message or "üìö" in message or "‚ö°" in message or "üî¢" in message:
            self.attack_progress.append(message)

    def on_attack_finished(self):
        self.start_attack_button.setEnabled(True)
        self.stop_attack_button.setEnabled(False)
        if self.cracker:
            self.cracker.deleteLater()
        if self.cracker_thread:
            self.cracker_thread.deleteLater()

    def closeEvent(self, event):
        self.stop_attack()
        super().closeEvent(event)


# --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ  ---
class LoginWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        self.setGeometry(100, 100, 300, 200)
        layout = QVBoxLayout()

        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("–õ–æ–≥–∏–Ω")

        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        self.password_input.setEchoMode(QLineEdit.Password)

        self.login_button = QPushButton("–í–æ–π—Ç–∏")
        self.login_button.clicked.connect(self.login)

        self.analysis_button = QPushButton("–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª–µ–π")
        self.analysis_button.clicked.connect(self.open_analysis)

        layout.addWidget(QLabel("–õ–æ–≥–∏–Ω:"))
        layout.addWidget(self.username_input)
        layout.addWidget(QLabel("–ü–∞—Ä–æ–ª—å:"))
        layout.addWidget(self.password_input)
        layout.addWidget(self.login_button)
        layout.addWidget(self.analysis_button)
        self.setLayout(layout)

    def login(self):
        username = self.username_input.text()
        password = self.password_input.text()
        users = load_users()

        if username not in users:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if users[username]["blocked"]:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return

        if users[username]["password"] == hash_password(password):
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
            if username == "ADMIN":
                self.admin_window = AdminWindow(self)
                self.admin_window.show()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    def open_analysis(self):
        self.analysis_window = PasswordAnalysisWindow(self)
        self.analysis_window.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LoginWindow()
    window.show()
    sys.exit(app.exec())

import base64
import os
import tempfile
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import qrcode
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from PyPDF2 import PdfReader, PdfWriter
import binascii

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SALT = b'salt_123'
ITERATIONS = 100_000


class PDFSteganographer:
    def __init__(self, password):
        self.password = password
        self.key = self._generate_key(password)

    def _generate_key(self, password):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è."""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=SALT,
            iterations=ITERATIONS,
            backend=default_backend()
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return Fernet(key)

    def hide_data(self, input_pdf, output_pdf, secret_message):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            encrypted_msg = self.key.encrypt(secret_message.e–´ncode())

            # –ß–∏—Ç–∞–µ–º PDF
            reader = PdfReader(input_pdf)
            writer = PdfWriter()

            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for page in reader.pages:
                writer.add_page(page)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            writer.add_metadata({
                '/Creator': 'PDF Steganography',
                '/HiddenData': binascii.hexlify(encrypted_msg).decode()
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Å –ø–∞—Ä–æ–ª–µ–º
            with open(output_pdf, 'wb') as f:
                writer.encrypt(self.password, use_128bit=True)
                writer.write(f)

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False

    def extract_data(self, secret_pdf):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Base64 –∫–ª—é—á–∞."""
        try:
            reader = PdfReader(secret_pdf)
            if reader.is_encrypted:
                reader.decrypt(self.password)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if hasattr(reader, 'metadata') and reader.metadata:
                encrypted_hex = reader.metadata.get('/HiddenData', '')
                if encrypted_hex:
                    encrypted_msg = binascii.unhexlify(encrypted_hex)

                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∫–ª—é—á –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏
                    if hasattr(self.key, '_signing_key'):
                        key_b64 = base64.b64encode(self.key._signing_key).decode('ascii')
                        return f"–ö–ª—é—á: {key_b64}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {self.key.decrypt(encrypted_msg).decode()}"

                    return self.key.decrypt(encrypted_msg).decode()

            return "‚ùå –°–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {str(e)}"

    def _generate_qrcode(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Å –∫–ª—é—á–æ–º –≤ Base64."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
            key_bytes = self.key._signing_key

            # –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            key_b64 = base64.b64encode(key_bytes).decode('ascii')

            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(key_b64)
            qr.make(fit=True)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.gettempdir()
            qr_path = os.path.join(temp_dir, f"pdf_steg_qr_{os.getpid()}.png")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            img.save(qr_path)

            return qr_path

        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR] {type(e).__name__}: {str(e)}")
            return None

class SteganographyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("PDF Steganography Pro")
        self.root.geometry("700x600")

        # –°—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.configure("TButton", padding=6, font=("Arial", 10))
        self.style.configure("TLabel", font=("Arial", 11))

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.input_pdf_var = tk.StringVar()
        self.output_pdf_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.message_var = tk.StringVar()

        # GUI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.create_widgets()

    def create_widgets(self):
        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(self.root, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", padding=10)
        input_frame.pack(pady=10, padx=10, fill="x")

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        ttk.Label(input_frame, text="–ò—Å—Ö–æ–¥–Ω—ã–π PDF:").grid(row=0, column=0, sticky="w")
        ttk.Entry(input_frame, textvariable=self.input_pdf_var, width=40).grid(row=0, column=1)
        ttk.Button(input_frame, text="–û–±–∑–æ—Ä", command=self.browse_input).grid(row=0, column=2)

        ttk.Label(input_frame, text="–í—ã—Ö–æ–¥–Ω–æ–π PDF:").grid(row=1, column=0, sticky="w")
        ttk.Entry(input_frame, textvariable=self.output_pdf_var, width=40).grid(row=1, column=1)
        ttk.Button(input_frame, text="–û–±–∑–æ—Ä", command=self.browse_output).grid(row=1, column=2)

        ttk.Label(input_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, sticky="w")
        ttk.Entry(input_frame, textvariable=self.password_var, show="*", width=40).grid(row=2, column=1)

        ttk.Label(input_frame, text="–°–æ–æ–±—â–µ–Ω–∏–µ:").grid(row=3, column=0, sticky="w")
        ttk.Entry(input_frame, textvariable=self.message_var, width=40).grid(row=3, column=1)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = ttk.Frame(self.root)
        btn_frame.pack(pady=10)

        ttk.Button(btn_frame, text="–°–ø—Ä—è—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.hide_data).grid(row=0, column=0, padx=5)
        ttk.Button(btn_frame, text="–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ", command=self.extract_data).grid(row=0, column=1, padx=5)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è QR-–∫–æ–¥–∞
        self.qr_frame = ttk.LabelFrame(self.root, text="–ö–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏", padding=10)
        self.qr_frame.pack(pady=10, fill="both", expand=True)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(self.root, textvariable=self.status_var, relief="sunken", anchor="w").pack(fill="x", padx=10, pady=5)

    def browse_input(self):
        filename = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
        if filename:
            self.input_pdf_var.set(filename)

    def browse_output(self):
        filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if filename:
            self.output_pdf_var.set(filename)

    def hide_data(self):
        if not all([self.input_pdf_var.get(), self.output_pdf_var.get(),
                    self.password_var.get(), self.message_var.get()]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return

        try:
            stego = PDFSteganographer(self.password_var.get())
            if stego.hide_data(self.input_pdf_var.get(),
                               self.output_pdf_var.get(),
                               self.message_var.get()):
                self.status_var.set("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç—ã!")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥
                qr_path = stego._generate_qrcode()
                if qr_path:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ QR-–∫–æ–¥—É –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
                    self.current_qr_path = qr_path
                    self.show_qrcode(qr_path)
                else:
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "QR-–∫–æ–¥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def extract_data(self):
        if not all([self.input_pdf_var.get(), self.password_var.get()]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ PDF –∏ –ø–∞—Ä–æ–ª—å!")
            return

        try:
            stego = PDFSteganographer(self.password_var.get())
            result = stego.extract_data(self.input_pdf_var.get())

            if result.startswith("‚ùå"):
                messagebox.showerror("–û—à–∏–±–∫–∞", result)
            else:
                messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{result}")
                self.status_var.set("üîç –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def show_qrcode(self, path):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞."""
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π QR-–∫–æ–¥
            for widget in self.qr_frame.winfo_children():
                widget.destroy()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(path):
                raise FileNotFoundError(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(path)
            if not img:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            max_size = (300, 300)
            img.thumbnail(max_size, Image.LANCZOS)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Tkinter
            photo = ImageTk.PhotoImage(img)

            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            label = ttk.Label(self.qr_frame, image=photo)
            label.image = photo  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            label.pack(pady=5)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ
            ttk.Label(
                self.qr_frame,
                text="–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏",
                font=('Arial', 9)
            ).pack()

            # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ttk.Button(
                self.qr_frame,
                text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥",
                command=lambda: self.save_qrcode_image(path)
            ).pack(pady=5)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞: {str(e)}"
            ttk.Label(
                self.qr_frame,
                text=error_msg,
                foreground='red'
            ).pack()
            print(error_msg)

    def save_qrcode_image(self, source_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""
        try:
            if not os.path.exists(source_path):
                raise FileNotFoundError("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            dest_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[("PNG files", "*.png"), ("All files", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥ –∫–∞–∫..."
            )

            if dest_path:
                import shutil
                shutil.copy(source_path, dest_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{dest_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = SteganographyApp(root)
    root.mainloop()